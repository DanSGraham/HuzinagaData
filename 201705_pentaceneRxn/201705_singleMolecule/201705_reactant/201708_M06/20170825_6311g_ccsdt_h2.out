********************************************************************************
*                              PySCF CALCULATION                               *
********************************************************************************

================================== Input File ==================================

atoms
H    0.0000   0.0000    0.0000
H    0.0000   0.0000    0.7400
end
basis 6-311g

scf
 method ks
 xc m06
 grid 4
 conv 1e-8
 grad 1e-8
 maxiter 100
 #shift 1.0
 damp 1.0
end
================================== End Input ===================================
#INFO: **** input file is /home/goodpast/shared/repositories/pyscf_wrapper/run_pySCF.py ****
#!/usr/bin/env python

def main():
    '''Python wrapper to read a pySCF input file
    and run the corresponding calculations.'''

    from argparse import ArgumentParser, RawDescriptionHelpFormatter
    from textwrap import dedent
    from read_input import read_input, pstr
    import sys
    from simple_timer import timer
    from scf import do_scf
    from geomopt import do_geomopt
    from vfreq import vibrations

    # generate a parser to read the input files
    parser = ArgumentParser(description=dedent(main.__doc__),
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('input_files', nargs='*', default=sys.stdin,
                        help='The pySCF input files.')
    args = parser.parse_args()

    # Cycle through all input files
    for files in args.input_files:

        # print header
        pstr ("", delim="*", addline=False)
        pstr ("PySCF CALCULATION", delim="*", fill=False, addline=False)
        pstr ("", delim="*", addline=False)

        # get input data
        inp = read_input(files)

        # start timer
        inp.timer = timer()

        # do single point energy
        inp = do_scf(inp)

        # do geomotry optimization
        if inp.geomopt: inp = do_geomopt(inp)

        if inp.vfreq: vibrations(inp)

        # end timer
        inp.timer.close()

        # print footer
        pstr("", delim="*")
        pstr("END OF CALCULATION", delim="*", fill=False, addline=False)
        pstr("", delim="*", addline=False)

if __name__=='__main__':
    main()
#INFO: ******************** input file end ********************


System: ('Linux', 'cn0093', '2.6.32-696.6.3.el6.x86_64', '#1 SMP Wed Jul 12 14:17:22 UTC 2017', 'x86_64', 'x86_64')  Threads 24
Python 2.7.6 | 64-bit | (default, Sep 15 2014, 17:36:10) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-54)]
numpy 1.10.4  scipy 0.17.0
Date: Fri Aug 25 15:25:45 2017
PySCF version 1.4a
PySCF path  /home/goodpast/graha682/code/python/pyscf/pyscf
GIT ORIG_HEAD 9330ea3bfcc413f76711ba39e39d531f72dcda29
GIT HEAD      ref: refs/heads/master
GIT master branch  5a6e4032c6cb310076977bf244a460aa6dd0f9f2

[INPUT] VERBOSE 4
[INPUT] num atoms = 2
[INPUT] num electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.740000000000 AA    0.000000000000   0.000000000000   1.398397332178 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [3    /1   ]  33.865            0.0254938
                                5.09479           0.190373
                                1.15879           0.852161
[INPUT] 0    0    [1    /1   ]  0.32584              1
[INPUT] 0    0    [1    /1   ]  0.102741             1
nuclear repulsion = 0.715104339081081
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 6
basis = {'H': [[0, [33.865, 0.0254938], [5.09479, 0.190373], [1.15879, 0.852161]], [0, [0.32584, 1.0]], [0, [0.102741, 1.0]]]}
ecp = {}
CPU time:         0.61
None
tot grids = 32376


******** <class 'pyscf.dft.rks.RKS'> flags ********
method = RKS
initial guess = atom
damping factor = 0
level shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-08
SCF gradient tol = 1e-08
max. SCF cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /panfs/roc/scratch/graha682/20170825_6311g_ccsdt_h2/tmp2Tf8tz
max_memory 4000 MB (current use 53 MB)
XC functionals = m06
small_rho_cutoff = 1e-20
radial grids: Treutler-Ahlrichs (JCP 102, 346 (M4)) radial grids
becke partition: Becke, JCP, 88, 2547 (1988)
pruning grids: <function nwchem_prune at 0x195a5f0>
grids dens level: 4
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x195a488>
Initial guess from superpostion of atomic densties.
init E= -0.925581463325757
  HOMO = -0.570950897030662  LUMO = -0.0078927016718135
cycle= 1 E= -1.16635062602826  delta_E= -0.241  |g|= 0.0734  |ddm|= 0.722
  HOMO = -0.4241819470614  LUMO = 0.0695853586232213
cycle= 2 E= -1.16852976577161  delta_E= -0.00218  |g|= 0.0103  |ddm|= 0.0775
  HOMO = -0.441681599657193  LUMO = 0.0686903952208976
cycle= 3 E= -1.1685790060806  delta_E= -4.92e-05  |g|= 0.000213  |ddm|= 0.0104
  HOMO = -0.441557391740051  LUMO = 0.0687151677905734
cycle= 4 E= -1.16857901939194  delta_E= -1.33e-08  |g|= 4.26e-05  |ddm|= 0.000354
  HOMO = -0.441558684560268  LUMO = 0.0687223585709661
cycle= 5 E= -1.16857902019602  delta_E= -8.04e-10  |g|= 8.66e-09  |ddm|= 6.92e-05
  HOMO = -0.441558683690624  LUMO = 0.0687222279438274
Extra cycle  E= -1.16857902019602  delta_E=    0  |g|= 8.66e-09  |ddm|= 1.53e-08
converged SCF energy = -1.16857902019602
================================================================================
TIMING STATISTICS:
                 grids      0.03s   ( 3.16%)
                    ks      0.88s   (99.99%)
                 TOTAL      0.88s
================================================================================

********************************************************************************
*                              END OF CALCULATION                              *
********************************************************************************
